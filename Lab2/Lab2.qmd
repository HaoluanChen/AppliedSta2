---
title: "Lab2"
author: "Haoluan Chen"
format: pdf
editor: visual
---

```{r}
#| message: false
library(opendatatoronto)
library(tidyverse)
library(stringr)
library(skimr) # EDA
library(visdat) # EDA
library(janitor)
library(lubridate)
library(ggrepel)
```

# Lab Exercises

To be handed in via submission of quarto file (and rendered pdf) to GitHub.

## 1. Using the `delay_2022` data, plot the five stations with the highest mean delays. Facet the graph by `line`
```{r}
res <- list_package_resources("996cfe8d-fb35-40ce-b569-698d51fc683b") 
res <- res |> mutate(year = str_extract(name, "202.?"))
delay_2022_ids <- res |> filter(year==2022) |> select(id) |> pull()

delay_2022 <- get_resource(delay_2022_ids)

# make the column names nicer to work with
delay_2022 <- clean_names(delay_2022)
delay_2022 <- delay_2022 |> filter(line %in% c("BD", "YU", "SHP", "SRT"))
head(delay_2022)
```

```{r}
q1 <- delay_2022 %>% group_by(station, line) %>% 
  summarise(across(min_delay,mean),  .groups = "keep")
```

```{r}
q1 %>% group_by(line) %>% top_n(n = 5, wt = min_delay)
```


```{r fig.height= 12}
q1 %>% group_by(line) %>% top_n(n = 5, wt = min_delay) %>% 
  ggplot(aes(x=station, min_delay)) + 
  geom_point() + 
  facet_wrap(~line, ncol = 1) + 
  theme(axis.text.x = element_text(angle = 90))
```





## 2. Using the `opendatatoronto` package, download the data on mayoral campaign contributions for 2014. Hints:
    + find the ID code you need for the package you need by searching for 'campaign' in the `all_data` tibble above
    + you will then need to `list_package_resources` to get ID for the data file
    + note: the 2014 file you will get from `get_resource` has a bunch of different campaign contributions, so just keep the data that relates to the Mayor election
    
```{r}
#| message: false
all_data <- list_packages(limit = 500)
res <- list_package_resources("f6651a40-2f52-46fc-9e04-b760c16edd5c")
campaign_id <- res %>% filter(name == "campaign-contributions-2014-data") %>% 
  select(id)
campaign <- get_resource(campaign_id)
campaign <- campaign[["2_Mayor_Contributions_2014_election.xls"]]
campaign
```
    
## 3. Clean up the data format (fixing the parsing issue and standardizing the column names using `janitor`)
```{r}
campaign <- row_to_names(campaign, 1) %>% clean_names()
campaign
```

## 4. Summarize the variables in the dataset. Are there missing values, and if so, should we be worried about them? Is every variable in the format it should be? If not, create new variable(s) that are in the right format.
```{r}
skim(campaign)
```


There are missing values, for example, 10197 out of 10199 rows of Contributor's Address, President/ Business Manager, Authorized Representative is missing. Also, we don't have any observations for Ward. Additionally, goods_or_service_desc has 10188 missing value and relationship_to_candidate has 10166 missing value.

We don't need to worry about it unless we are interested in these variable. In our case, we are interested in the contribution amount, which does not have missing value. However, we also need to pay attention to the missing values that may have meaning to it. For example the missing in relationship_to_candidate may mean that there is no relationship between the contributor and the candidate. The Contribution Amount is character format, but it should be in numeric format.

```{r}
campaign <- campaign %>% 
  mutate('contribution_amount' = as.numeric(`contribution_amount`))
campaign
```


## 5. Visually explore the distribution of values of the contributions. What contributions are notable outliers? Do they share a similar characteristic(s)? It may be useful to plot the distribution of contributions without these outliers to get a better sense of the majority of the data. 

```{r}
campaign %>% ggplot(aes(x = contribution_amount)) + 
  geom_histogram(bins = 48) + scale_x_log10()
```


```{r}
unique(campaign$relationship_to_candidate)
```
```{r}
campaign %>% mutate(relationship = 
                      if_else(is.na(relationship_to_candidate),
                              "No Relation", relationship_to_candidate)) %>% 
  ggplot(aes(x=contribution_amount, fill = relationship, color = relationship)) + 
  geom_histogram(position="identity", alpha=0.5) + scale_x_log10()
```
We can see that the candidates are contributing a large amount of contribution. Lets split the histogram and look into the relationship separately.

```{r}
campaign %>% mutate(relationship = 
                      if_else(is.na(relationship_to_candidate),
                              "No Relation", relationship_to_candidate)) %>% 
  ggplot(aes(x=contribution_amount, fill = relationship, color = relationship)) + 
  geom_histogram(position="identity", alpha=0.5) + 
  facet_wrap(~relationship, ncol = 1, scales = "free")

```
```{r}
campaign %>% 
  filter(relationship_to_candidate == "Candidate") %>% 
  arrange(desc(contribution_amount))
```

The majority of the data contributes range from 0 to about 2500, There are only three contributions from spouse, and they are at the two extreme, one spouse contributed 500 and other two contributed 2500. However, looking at the the candidates, they are contributing a lot of money(outlines) with the highest amount of 508224.73. 

## 6. List the top five candidates in each of these categories:
```{r}
Q6 <- campaign %>%
  group_by(candidate) %>%
  summarize(total_contributions = sum(contribution_amount),
  mean_contributions = mean(contribution_amount),
  number_contributions = n())
```

### total contributions
```{r}
Q6 %>% arrange(desc(total_contributions)) %>% head(5)
```
    
### mean contribution
```{r}
Q6 %>% arrange(desc(mean_contributions)) %>% head(5)
```

### number of contributions
```{r}
Q6 %>% arrange(desc(number_contributions)) %>% head(5)
```

    
## 7. Repeat 6 but without contributions from the candidates themselves.
```{r}
Q7 <- campaign %>% 
  filter(relationship_to_candidate == "Spouse" | 
           is.na(relationship_to_candidate)) %>% 
  group_by(candidate) %>%
  summarize(total_contributions = sum(contribution_amount),
  mean_contributions = mean(contribution_amount),
  number_contributions = n())
```
### total contributions
```{r}
Q7 %>% arrange(desc(total_contributions)) %>% head(5)
```
    
### mean contribution
```{r}
Q7 %>% arrange(desc(mean_contributions)) %>% head(5)
```

### number of contributions
```{r}
Q7 %>% arrange(desc(number_contributions)) %>% head(5)
```

## 8. How many contributors gave money to more than one candidate? 
```{r}
campaign %>%
  select(contributors_name, candidate) %>%
  distinct() %>%
  group_by(contributors_name) %>%
  summarize(num_candidates = n()) %>%
  filter(num_candidates > 1)

```
184 contributors gave money to more than one candidate.

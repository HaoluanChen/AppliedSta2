---
title: "Week 5: Bayesian linear regression and introduction to Stan"
date: today
date-format: "DD/MM/YY"
format: pdf
execute: 
  warning: false
  message: false
---

# Introduction

Today we will be starting off using Stan, looking at the kid's test score data set (available in resources for the [Gelman Hill textbook](https://mc-stan.org/rstanarm/reference/rstanarm-datasets.html)). 

```{r}
library(tidyverse)
library(rstan)
library(tidybayes)
library(here)
```


The data look like this:

```{r}
kidiq <- read_rds(here("data","kidiq.RDS"))
kidiq
```

As well as the kid's test scores, we have a binary variable indicating whether or not the mother completed high school, the mother's IQ and age. 


# Descriptives

## Question 1

Use plots or tables to show three interesting observations about the data. Remember:

- Explain what your graph/ tables show
- Choose a graph type that's appropriate to the data type

```{r}
kidiq %>%
ggplot(aes(x = mom_iq, y = kid_score, col = as.factor(mom_hs))) +
geom_point() 
```
The plot shows that there is much more observations with mom attended high school. It looks like there is increasing trend for kid's score as mom's iq increase no matter the mom attended high school or not. 

```{r}
kidiq %>%
ggplot(aes(x = as.factor(mom_hs), y = kid_score)) +
geom_boxplot()
```
The box plot shows that there is wider variability in kid's score when mother did not attend high school. And when the mom didn't attend high school, the median, 25% and 75% quantile of kid's score are lower. 

```{r}
kidiq %>%
ggplot(aes(x = mom_age, y = kid_score)) +
geom_point() 
```
Based on the scatter plot, I don't think mom's age affect kid's score. 

# Estimating mean, no covariates

In class we were trying to estimate the mean and standard deviation of the kid's test scores. The `kids2.stan` file contains a Stan model to do this. If you look at it, you will notice the first `data` chunk lists some inputs that we have to define: the outcome variable `y`, number of observations `N`, and the mean and standard deviation of the prior on `mu`. Let's define all these values in a `data` list.


```{r}
y <- kidiq$kid_score
mu0 <- 80
sigma0 <- 10

# named list to input for stan function
data <- list(y = y, 
             N = length(y), 
             mu0 = mu0,
             sigma0 = sigma0)
```



Now we can run the model:

```{r}
fit <- stan(file = here("Labs/Lab5/kids2.stan"),
            data = data,
            chains = 3,
            iter = 500)
```

Look at the summary

```{r}
fit
```

Traceplot

```{r}
traceplot(fit)
```

All looks fine. 

```{r}
pairs(fit, pars = c("mu", "sigma"))
```

```{r}
stan_dens(fit, separate_chains = TRUE)
```


## Understanding output

What does the model actually give us? A number of samples from the posteriors. To see this, we can use `extract` to get the samples. 

```{r}
post_samples <- extract(fit)
head(post_samples[["mu"]])
```


This is a list, and in this case, each element of the list has 4000 samples. E.g. quickly plot a histogram of mu

```{r}
hist(post_samples[["mu"]])
median(post_samples[["mu"]])
# 95% bayesian credible interval
quantile(post_samples[["mu"]], 0.025)
quantile(post_samples[["mu"]], 0.975)
```



## Plot estimates

There are a bunch of packages, built-in functions that let you plot the estimates from the model, and I encourage you to explore these options (particularly in `bayesplot`, which we will most likely be using later on). I like using the `tidybayes` package, which allows us to easily get the posterior samples in a tidy format (e.g. using gather draws to get in long format). Once we have that, it's easy to just pipe and do ggplots as usual. 


Get the posterior samples for mu and sigma in long format:

```{r}
dsamples <- fit  |> 
  gather_draws(mu, sigma) # gather = long format
dsamples

# wide format
fit  |>  spread_draws(mu, sigma)

# quickly calculate the quantiles using 

dsamples |> 
  median_qi(.width = 0.8)
```

Let's plot the density of the posterior samples for mu and add in the prior distribution

```{r}
dsamples |> 
  filter(.variable == "mu") |> 
  ggplot(aes(.value, color = "posterior")) + geom_density(size = 1) + 
  xlim(c(70, 100)) + 
  stat_function(fun = dnorm, 
        args = list(mean = mu0, 
                    sd = sigma0), 
        aes(colour = 'prior'), size = 1) +
  scale_color_manual(name = "", values = c("prior" = "red", "posterior" = "black")) + 
  ggtitle("Prior and posterior for mean test scores") + 
  xlab("score")
  
```

## Question 2

Change the prior to be much more informative (by changing the standard deviation to be 0.1). Rerun the model. Do the estimates change? Plot the prior and posterior densities.

```{r}
y <- kidiq$kid_score
mu0 <- 80
sigma0 <- 0.1

# named list to input for stan function
data <- list(y = y, 
             N = length(y), 
             mu0 = mu0,
             sigma0 = sigma0)
```



Now we can run the model:

```{r}
fit <- stan(file = here("Labs/Lab5/kids2.stan"),
            data = data,
            chains = 3,
            iter = 500)
```
```{r}
dsamples <- fit  |> 
  gather_draws(mu, sigma) # gather = long format
dsamples |> 
  filter(.variable == "mu") |> 
  ggplot(aes(.value, color = "posterior")) + geom_density(size = 1) + 
  xlim(c(70, 100)) + 
  stat_function(fun = dnorm, 
        args = list(mean = mu0, 
                    sd = sigma0), 
        aes(colour = 'prior'), size = 1) +
  scale_color_manual(name = "", values = c("prior" = "red", "posterior" = "black")) + 
  ggtitle("Prior and posterior for mean test scores") + 
  xlab("score")
  
```
```{r}
fit
```

The estimates does change. The mean of the posterior of mu became 80.06, very close to our strong prior that the mean should be around 80. The sd of posterior of mu became 0.1, much smaller than before(0.93). This also reflected on the posterior density plot that we have much narrower density. Also, the sigma increased slightly from 20.40 to 21.41.


# Adding covariates

Now let's see how kid's test scores are related to mother's education. We want to run the simple linear regression

$$
Score = \alpha + \beta X
$$
where $X = 1$ if the mother finished high school and zero otherwise. 

`kid3.stan` has the stan model to do this. Notice now we have some inputs related to the design matrix $X$ and the number of covariates (in this case, it's just 1).

Let's get the data we need and run the model. 



```{r}
X <- as.matrix(kidiq$mom_hs, ncol = 1) # force this to be a matrix
K <- 1

data <- list(y = y, N = length(y), 
             X =X, K = K)
fit2 <- stan(file = here("Labs/Lab5/kids3.stan"),
            data = data, 
            iter = 1000)
```



## Question 3

a) Confirm that the estimates of the intercept and slope are comparable to results from `lm()` 
b) Do a `pairs` plot to investigate the joint sample distributions of the slope and intercept. Comment briefly on what you see. Is this potentially a problem?

```{r}
fit2
```


```{r}
model3 = lm(kid_score ~ mom_hs, data = kidiq)
summary(model3)
```

The output from lm agrees with our model output. In lm, we have intercept of 77.548 and estimate for mom_hs is 11.771, where from our stan model, we have intercept of 77.96 and estimate for mom_hs is 11.21. 

```{r}
pairs(fit2, pars = c("alpha", "beta[1]"))
```

Yes, there is a correlction problem that as alpha(intercept) increase we get a lower beta(slope). 

## Plotting results

It might be nice to plot the posterior samples of the estimates for the non-high-school and high-school mothered kids. Here's some code that does this: notice the `beta[condition]` syntax. Also notice I'm using `spread_draws`, because it's easier to calculate the estimated effects in wide format

```{r}
fit2 |>
  spread_draws(alpha, beta[k], sigma) |> 
     mutate(nhs = alpha, # no high school is just the intercept
          hs = alpha + beta) |> 
  select(nhs, hs) |> 
  pivot_longer(nhs:hs, names_to = "education", values_to = "estimated_score") |> 
  ggplot(aes(y = education, x = estimated_score)) +
  stat_halfeye() + 
  theme_bw() + 
  ggtitle("Posterior estimates of scores by education level of mother")
  
```


## Question 4

Add in mother's IQ as a covariate and rerun the model. Please  mean center the covariate before putting it into the model. Interpret the coefficient on the (centered) mum's IQ. 


```{r}
kidiqdata <- kidiq %>% mutate(ceneterdiq = scale(mom_iq, scale = FALSE))
X <- as.matrix(cbind(kidiqdata$mom_hs, kidiqdata$ceneterdiq), nrow = 434, ncol = 2) # force this to be a matrix
K <- 2

data <- list(y = y, N = length(y), 
             X =X, K = K)
fit3 <- stan(file = here("Labs/Lab5/kids3.stan"),
            data = data, 
            iter = 1000)
```

```{r}
fit3
```
The coefficient estimate is 0.57, this means that every mom's IQ point higher than average the
estimated kid score is increased by 0.57.


## Question 5 

Confirm the results from Stan agree with `lm()`

```{r}
model5 = lm(kid_score ~ mom_hs+ceneterdiq, data = kidiqdata)
summary(model5)
``` 
The result from lm agree with the stan result: in lm we have 82.12, 5.95 and 0.56 for the intercept, beta1, beta2. In Stan, we got 82.31, 5.72 and 0.57

## Question 6

Plot the posterior estimates of scores by education of mother for mothers who have an IQ of 110. 
```{r}
fit3 |>
  spread_draws(alpha, beta[k], sigma) |> 
  pivot_wider(names_from = k, names_prefix = "beta", values_from = beta) |> 
     mutate(nhs = alpha + beta2*10, # no high school is just the intercept
          hs = alpha + beta1 + beta2*10) |> 
  select(nhs, hs) |> 
  pivot_longer(nhs:hs, names_to = "education", values_to = "estimated_score") |> 
  ggplot(aes(y = education, x = estimated_score)) +
  stat_halfeye() + 
  theme_bw() + 
  ggtitle("Posterior estimates of scores by education level of mother with IQ 110")
  
```




## Question 7

Generate and plot (as a histogram) samples from the posterior predictive distribution for a new kid with a mother who graduated high school and has an IQ of 95. 
```{r}
x_new = 95
post_samples <- extract(fit3)
alpha_hat <- post_samples[["alpha"]]
beta1_hat <- post_samples[["beta"]][,1]
beta2_hat <- post_samples[["beta"]][,2]
sigma_hat <- post_samples[["sigma"]]
lin_pre <- alpha_hat + beta1_hat + -5*beta2_hat
y_new <- rnorm(n = length(sigma_hat), mean = lin_pre, sd = sigma_hat)
hist(y_new)
```



